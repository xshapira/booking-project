[tool.poetry]
name = "Booking Project"
version = "0.1.0"
description = ""
authors = ["Max <max@winoutt.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.11"

# 3rd party
django = "^4.2.3"
requests = "^2.28.1"
django-htmx = "^1.13.0"
django-widget-tweaks = "^1.4.12"
pydantic-settings = { extras = ["dotenv"], version = "^2.0.2" }

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.11"
djlint = "^1.19.10"
pre-commit = "^3.5.0"

[tool.mypy]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
no_implicit_reexport = true
check_untyped_defs = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
show_error_codes = true

[tool.ruff]
line-length = 88
exclude = ['.git', '__pycache__', '__init__.py', '.mypy_cache', '.pytest_cache']
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C",  # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long
  "C901", # Comprehension is too complex (11 > 10)
  "W191", # indentation contains tabs,
  "B018", # avoid 'Found useless expression' in notebook
  "I001",
]
unfixable = ["F841"]
extend-include = ["*.ipynb"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
